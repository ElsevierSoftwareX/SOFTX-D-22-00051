{
  "$schema": "http://json-schema.org/draft-07/schema#",

  "definitions": {
    "runNumberTypes": {
      "anyOf": [{"type": "string", "minLength": 1},
                {"type": "integer", "minimum": 1},
                {"type": "array", "minItems": 1, "items": {"type": ["integer", "string"]}}],
      "dataSource": "events",
      "preferredType": "runstr"
    },
    "runNumberOptionalTypes": {
      "anyOf": [{"type": "string"},
                {"type":  "null"},
                {"type": "integer", "minimum": 1},
                {"type": "array", "items": {"type": ["integer", "string"]}}],
      "dataSource": "events",
      "preferredType": "runstr"
    },
    "transmissionValueTypes": {
      "anyOf": [{"type": "string", "pattern": "^$|^0?.[0-9]*$"},
                {"type": "null"},
                {"type": "number", "exclusiveMinimum": 0, "maximum": 1}],
      "preferredType": "float"
    },
    "safeString": {
      "anyOf": [{"type": "string"},
                {"type": "null"}]
    },
    "safeStringFloat": {
      "anyOf": [{"type": "string", "pattern": "^$|^[0-9]*.[0-9]*$"},
                {"type": "null"},
                {"type": "number"}],
      "preferredType": "float"
    },
    "safeStringNonNegativeFloat": {
      "anyOf": [{"type": "string", "pattern": "^$|^[0-9]*.[0-9]*$"},
                {"type": "null"},
                {"type": "number", "minimum": 0}],
      "preferredType": "float"
    },
    "safeStringPositiveFloat": {
      "anyOf": [{"type": "string", "pattern": "^$|^[0-9]*.[0-9]*$"},
                {"type": "null"},
                {"type": "number", "exclusiveMinimum": 0}],
      "preferredType": "float"
    },
    "safeStringPositiveFloatNotNone": {
      "anyOf": [{"type": "string", "minLength": 1, "pattern": "^$|^[0-9]*.[0-9]*$"},
                {"type": "number", "exclusiveMinimum": 0}],
      "preferredType": "float"
    },
    "safeStringPositiveInteger": {
      "anyOf": [{"type": "string", "pattern": "^[1-9][0-9]*$"},
                {"type": "null"},
                {"type": "number", "minimum": 1}],
      "preferredType": "int"
    },
    "safeWedgeAngleSpecs": {
      "anyOf": [{"type": "number", "minimum": -90, "exclusiveMaximum": 270},
                {"type": "null"},
                {"type": "array", "items": {"type": "number", "minimum": -90, "exclusiveMaximum": 270}}],
      "preferredType": "[float]"
    },
    "safeStitchQbounsSpecs": {
      "anyOf": [{"type": "number", "ExclusiveMinimum": 0},
                {"type": "null"},
                {"type": "array", "items": {"type": "number", "ExclusiveMinimum": 0}}],
      "preferredType": "[float]"
    },
      "lmfitParameter" : {
        "type": "object",
        "additionalProperties": {
          "value": {
            "type": "number",
            "descriptions": "Numerical Parameter value."
          },
          "vary": {
            "type": "boolean",
            "description": "Whether the Parameter is varied during a fit."
          },
          "min": {
            "type": "number",
            "description": "Lower bound for value."
          },
          "max": {
            "type": "number",
            "description": "Upper bound for value."
          },
          "expr": {
            "type": "string",
            "description": "Mathematical expression used to constrain the value during the fit."
          }
        }
     }
  },

  "schemaStamp": {
    "type": "string",
    "format":  "date-time",
    "default" : "2020-04-15T21:09:52.745905",
    "description" : "schema version as a time stamp in ISO 8601 format (YYYY-MM-DDThh:mm:ssZ), in UTC time"
  },
  "instrumentName": {
    "type": "string",
    "description": "The name of the instrument. Valid values are BIOSANS, EQSANS, and GPSANS",
    "enum": [
      "BIOSANS",
      "EQSANS",
      "GPSANS"
    ],
    "examples": ["BIOSANS", "EQSANS", "GPSANS"]
  },
  "iptsNumber": {
    "anyOf": [{"type": "string", "minLength": 1, "pattern": "^[1-9][0-9]*$"},
              {"type": "integer", "minimum": 1}],
    "description": "The IPTS number for the data files. The path to datafiles will be /SNS/EQSANS/IPTS-{iptsNumber}/nexus"
  },
  "dataDirectories": {
    "anyOf": [{"type": "null"}, {"type": "string"}, {"type": "array", "items":  {"type": "string"}}],
    "preferredType": "[str]",
    "description": "Directories where to find events or histogram files",
    "examples": ["/tmp/data", ["/tmp/data1", "/tmp/data2"]]
  },
  "sample": {
    "type": "object",
    "properties" : {
      "runNumber": {
        "$ref": "common.json#/definitions/runNumberTypes",
        "description": "The run number(s) for the sample. More than one run number can be specified by passing a list or by passing a string containing the run numbers separated by commas.",
        "examples": ["12345", 12345]
      },
      "thickness": {
        "anyOf": [{"type": "string","minLength": 1}, {"type": "number", "exclusiveMinimum": 0}],
        "description": "The sample thickness in cm",
        "preferredType": "float"
      },
      "transmission": {
        "type": "object",
        "properties": {
          "runNumber": {
            "$ref": "common.json#/definitions/runNumberOptionalTypes",
            "description": "The run number(s) for the transmission sample. More than one run number can be specified by passing a list or by passing a string containing the run numbers separated by commas.",
            "examples": ["12345", 12345]
          },
          "value": {
            "$ref": "common.json#/definitions/transmissionValueTypes"
          }
        },
        "maxProperties": 2,
        "required": ["runNumber", "value"],
        "description": "The transmission for the sample, run number or value (0 < value <=1). Can be empty",
        "examples": ["0.9", 1.0]
      }
    },
    "maxProperties": 3,
    "required": ["runNumber", "thickness", "transmission"]
  },
  "background": {
    "type": "object",
    "properties": {
      "runNumber": {
        "$ref": "common.json#/definitions/runNumberOptionalTypes",
        "description": "The run number(s) for the background run. More than one run number can be specified by passing a list or by passing a string containing the run numbers separated by commas.",
        "examples": ["12345", 12345]
      },
      "transmission": {
        "type": "object",
        "properties": {
          "runNumber": {
            "$ref": "common.json#/definitions/runNumberOptionalTypes",
            "description": "The run number(s) for the transmission of the background. The filename will be INSTRUMENTNAME_{runNumber}.nxs.h5",
            "examples": ["12345", 12345]
          },
          "value": {
            "$ref": "common.json#/definitions/transmissionValueTypes",
            "examples": ["0.9", 1.0]
          }
        },
        "maxProperties": 2,
        "required": ["runNumber", "value"],
        "description": "The transmission for the background, run number(s) or value (0 < value <=1). Can be empty"
      }
    },
    "maxProperties": 2,
    "required": ["runNumber", "transmission"]
  },
  "beamCenter": {
    "type": "object",
    "properties": {
      "runNumber": {
        "$ref": "common.json#/definitions/runNumberOptionalTypes",
        "description": "The run number(s) for the beam center calculation. More than one run number can be specified by passing a list or by passing a string containing the run numbers separated by commas.",
        "examples": ["12345", 12345]
      }
    },
    "additionalProperties": {
      "method": {
        "type": "string",
        "description": "Method to calculate the beam center. Available methods are: center_of_mass and gaussian.",
        "examples": ["center_of_mass", "gaussian"]
      },
      "gaussian_centering_options": {
        "type": "object",
        "description": "Arguments to be passed on to the centering method.",
        "additionalProperties": {
          "amp": {
            "$ref": "common.json#/definitions/lmfitParameter",
            "description": "Amplitude of the Gaussian function. Default: ws.extractY().max()"
          },
          "sigma_x": {
            "$ref": "common.json#/definitions/lmfitParameter",
            "description": "X spead of the Gaussian function. Default: 0.01"
          },
          "sigma_y": {
            "$ref": "common.json#/definitions/lmfitParameter",
            "description": "Y spead of the Gaussian function. Default: 0.01"
          },
          "theta": {
            "$ref": "common.json#/definitions/lmfitParameter",
            "description": "Clockwise rotation angle of Gaussian function. Default: 0"
          },
          "CenterX": {
            "$ref": "common.json#/definitions/lmfitParameter",
            "description": "Estimate for the beam center in X [m]. Default: 0"
          },
          "CenterY": {
            "$ref": "common.json#/definitions/lmfitParameter",
            "description": "Estimate for the beam center in Y [m]. Default: 0"
          }
        }
      },
      "com_centering_options": {
        "type": "object",
        "description": "Arguments to be passed on to the centering method.",
        "additionalProperties": {
          "CenterX": {
            "type": "number",
            "description": "Estimate for the beam center in X [m]. Default: 0" 
          },
          "CenterY": {
            "type": "number",
            "description": "Estimate for the beam center in Y [m]. Default: 0"
          },
          "Tolerance": {
            "$ref": "common.json#/definitions/safeStringPositiveFloat",
            "description": "Tolerance on the center of mass position between each iteration [m]. Default: 0.00125"
          },
          "DirectBeam": {
            "type": "boolean",
             "description": "If true, a direct beam calculation will be performed. Otherwise, the center of mass of the scattering data will be computed by excluding the beam area."
          },
          "BeamRadius": {
            "$ref": "common.json#/definitions/safeStringPositiveFloat",
            "description": "Radius of the beam area, in meters, used the exclude the beam when calculating the center of mass of the scattering pattern."
          }
        }
      }
    },
    "minProperties": 1,
    "maxProperties": 3,
    "required": ["runNumber"]
  },
  "emptyTransmission": {
    "type": "object",
    "properties": {
      "runNumber": {
        "$ref": "common.json#/definitions/runNumberOptionalTypes",
        "description": "The run number(s) for the empty beam, used for transmission calculation as a reference. More than one run number can be specified by passing a list or by passing a string containing the run numbers separated by commas.",
        "examples": ["12345", 12345]
      },
      "value": {
        "$ref": "common.json#/definitions/transmissionValueTypes",
        "examples": ["0.9", 1.0]
      }
    },
    "maxProperties": 2,
    "required": ["runNumber", "value"]
  },
  "outputFileName": {
    "type": "string",
    "minLength": 1,
    "description": "The prefix for all output filenames, such as {outputFileName}_Iqxqy.png. It cannot be left empty."
  },

  "configuration": {
    "outputDir": {"type": "string", "description": "Output folder"},
    "useTimeSlice": {
      "type": "boolean",
      "useEntry": "#configuration/timeSliceInterval",
      "onlyOneTrue": ["#configuration/useLogSlice"],
      "description": "Indicate whether the data should be processed as time slices (incompatible with sample log slicing)"
    },
    "timeSliceInterval": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "description": "Interval for time slicing"
    },
    "useSliceIDxAsSuffix": {
      "type": "boolean",
      "description": "If True, suffix is the slice index. If False, suffix is a composite (time, custom log values)"
    },
    "useLogSlice": {
      "type": "boolean",
      "useEntry": ["#configuration/logSliceName", "#configuration/logSliceInterval"],
      "onlyOneTrue": ["#configuration/useTimeSlice"],
      "description": "Indicate whether the data should be processed as sample log slices (incompatible with time slicing)"
    },
    "logSliceName": {
      "$ref": "common.json#/definitions/safeString",
      "description": "Sample log name for slicing"
    },
    "logSliceInterval": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "description": "Sample log interval for slicing"
    },
    "sampleOffset": {
      "$ref": "common.json#/definitions/safeStringFloat",
      "description": "Sample offset in mm"
    },
    "useDetectorOffset": {
      "type": "boolean",
      "useEntry": "#configuration/detectorOffset",
      "description": "Flag whether to use the detector offset"
    },
    "detectorOffset": {
      "$ref": "common.json#/definitions/safeStringFloat",
      "description": "Detector offset in mm"
    },
    "sampleDetectorDistance": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "description": "Distance between the sample and the detector array in mm"
    },
    "sampleToSi": {
      "$ref":  "common.json#/definitions/safeStringPositiveFloat",
      "description": "distance from sample to the silica window, in mm"
    },
    "sampleApertureSize": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "description": "Sample aperture diameter (mm)"
    },
    "sourceApertureDiameter": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat"
    },
    "usePixelCalibration": {
      "type": "boolean",
      "description": "Flag to apply the barscan and tube-width calibrations"
    },
    "maskFileName": {
      "$ref": "common.json#/definitions/safeString",
      "dataSource": "file",
      "description": "Path to a saved file containing mask"
    },
    "useDefaultMask": {
      "type": "boolean",
      "description": "flag to use a mask that is run number dependent (stored in a database)"
    },
    "defaultMask": {
      "anyOf": [{"type": "array", "items": {"type": ["object", "string"]}},
                {"type": "null"}],
      "preferredType": "[dict]",
      "description": "mask as optional arguments to be passed on to function drtsans.mask_utils.apply_mask()",
      "examples": [
        [{"Pixel": "1-18,239-256"}, {"Bank": "18-24,42-48"}],
        ["{'Pixel': '1-18,239-256'}", "{'Bank': '18-24,42-48'}"]
      ]
    },
    "useMaskBackTubes": {
      "type": "boolean",
      "description": "Flag whether to mask the tubes in the back"
    },
    "darkFileName": {
      "$ref": "common.json#/definitions/safeString",
      "dataSource": "file",
      "description": "Path to the dark measurement file"
    },
    "sensitivityFileName": {
      "$ref": "common.json#/definitions/safeString",
      "dataSource": "file",
      "description": "Path to sensitivity measurement file"
    },
    "useSolidAngleCorrection": {
      "type": "boolean",
      "description": "Flag whether to apply solid angle correction"
    },
    "blockedBeamRunNumber": {
      "$ref": "common.json#/definitions/runNumberOptionalTypes",
      "description": "Run number for the blocked beam run. More than one run number can be specified by passing a list or by passing a string containing the run numbers separated by commas."
    },
    "useThetaDepTransCorrection": {
      "type": "boolean",
      "description": "Flag whether to calculate a theta dependent transmission"
    },
    "DBScalingBeamRadius": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "description": ""
    },
    "mmRadiusForTransmission": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "description": "Integration radius (in mm) to be used for transmission calculation"
    },
    "absoluteScaleMethod": {
      "type": "string", "enum": ["standard", "direct_beam"],
      "description": "Absolute scaling method. Only 'standard' (multiply by a constant) is implemented for EQSANS",
      "examples": ["standard"]
    },
    "StandardAbsoluteScale": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "pairedTo": "#configuration/absoluteScaleMethod",
      "description": "Multiplicative scaling factor to transform intensity to absolute scale"
    },
    "numQxQyBins": {
      "$ref": "common.json#/definitions/safeStringPositiveInteger",
      "description": "Number of bins in the x and y direction for 2D binning"
    },
    "1DQbinType": {
      "type": "string", "enum": ["scalar", "annular", "wedge"],
      "description": "Options for 1D binning: |Q|, azimuthal angle, or |Q| for a particular wedge",
      "wedgeSources": [
        ["#configuration/WedgeMinAngles", "#configuration/WedgeMaxAngles"],
        ["#configuration/autoWedgeQmin", "#configuration/autoWedgeQdelta", "#configuration/autoWedgeQmax",
         "#configuration/autoWedgeAzimuthalDelta","#configuration/autoWedgePeakWidth",
         "#configuration/autoWedgeBackgroundWidth", "#configuration/autoWedgeSignalToNoiseMin"]
      ],
      "examples": ["scalar", "annular", "wedge"]
   },
    "QbinType": {
      "type": "string", "enum": ["linear", "log"],
      "description": "1D binning type for scalar or wedge modes ('linear' or 'log'). If 'linear' is selected, then 'numQbins' must be specified. If 'log' is selected, then either 'numQbins' or 'LogQBinsPerDecade' must be specified.",
      "examples": ["linear", "log"]
    },
    "numQBins": {
      "$ref": "common.json#/definitions/safeStringPositiveInteger",
      "description": "Number of 1D bins for scalar and wedge modes. If log binning is selected, then exactly one of numQBins and LogQBinsPerDecade must be specified"
    },
    "LogQBinsPerDecade": {
      "$ref": "common.json#/definitions/safeStringPositiveInteger",
      "description": "Number of 1D bins for scalar and wedge modes in every decade (in logarithmic mode only). If log binning is selected, then exactly one of numQBins and LogQBinsPerDecade must be specified"
    },
    "useLogQBinsDecadeCenter": {
      "type": "boolean",
      "description": "Flag to specify  that the min max |Q| is on a bin center; Otherwise, they will be on bin boundary"
    },
    "useLogQBinsEvenDecade": {
      "type": "boolean",
      "description": "If true, the logarithmic binning is extended such that it starts and ends on some power of 10"
    },
    "WedgeMinAngles": {
      "$ref": "common.json#/definitions/safeWedgeAngleSpecs",
      "pairedTo": "#configuration/WedgeMaxAngles",
      "sameLen": "#configuration/WedgeMaxAngles",
      "description": "Minimum angles for the wedges, from -90 to 270",
      "examples": [[-90, -75, -60]]
    },
    "WedgeMaxAngles": {
      "$ref": "common.json#/definitions/safeWedgeAngleSpecs",
      "pairedTo": "#configuration/WedgeMinAngles",
      "sameLen": "#configuration/WedgeMinAngles",
      "description": "Maximum angles for the wedges, from -90 to 270",
      "examples": [[240, 255, 270]]
    },
    "autoWedgeQmin": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "pairedTo": "#configuration/autoWedgeQmax",
      "lessThan": "#configuration/autoWedgeQmax",
      "description": "Minimum Q for automatic wedge fitting"
    },
    "autoWedgeQmax": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "pairedTo": "#configuration/autoWedgeQmin",
      "description": "Maximum Q for automatic wedge fitting"
    },
    "autoWedgeQdelta": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "description": "Q step for automatic wedge fitting"
    },
    "autoWedgeAzimuthalDelta": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "description": "Azimuthal angle step for automatic wedge fitting"
    },
    "autoWedgePeakWidth": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "description": "Percent of full-width-half-max (FWHM) of the peak in automatic wedge fitting."
    },
    "autoWedgeBackgroundWidth": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "description": "Percent of full-width-half-max (FWHM) of the background in automatic wedge fitting."
    },
    "autoWedgeSignalToNoiseMin": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "description": "Minimum signal to noise ratio for the data to be considered fittable in automatic wedge detection"
    },
    "autoWedgePeakSearchWindowSizeFactor": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "description": "Window size to search peak.  Real size = 360 / num_peaks * autoWedgeWindowSize"
    },
    "AnnularAngleBin": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "description": "Angle bin size in degrees for annular binning"
    },
    "Qmin": {
       "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "pairedTo": "#configuration/Qmax",
      "lessThan": "#configuration/Qmax",
      "description": "The minimum |Q| value for scalar, wedge, or annular binning"
    },
    "Qmax": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "pairedTo": "#configuration/Qmin",
      "description": "The maximum |Q| value for scalar, wedge, or annular binning"
    },
    "useErrorWeighting": {
      "type": "boolean",
      "description": "Flag whether to use error weighting of intensities when calculating resolution in Q"
    },
    "smearingPixelSizeX": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "pairedTo": "#configuration/smearingPixelSizeY",
      "description": "Override nominal pixel width when calculating resolution in Q"
    },
    "smearingPixelSizeY": {
      "$ref": "common.json#/definitions/safeStringPositiveFloat",
      "pairedTo": "#configuration/smearingPixelSizeX",
      "description": "Override nominal pixel height when calculating resolution in Q"
    },
    "useSubpixels": {
      "type": "boolean",
      "description": "boolean flag for stating whether or not the data pixels are to be subdivided. Used for data rebinning in momentum transfer.",
      "useEntry": ["#configuration/subpixelsX", "#configuration/subpixelsY"]
    },
    "subpixelsX": {
      "$ref": "common.json#/definitions/safeStringPositiveInteger",
      "pairedTo": "#configuration/subpixelsY",
      "description": "Divide pixel width an integer number of times when calculating resolution in Q"
    },
    "subpixelsY": {
      "$ref": "common.json#/definitions/safeStringPositiveInteger",
      "pairedTo": "#configuration/subpixelsX",
      "description": "Divide pixel heights width an integer number of times when calculating resolution in Q"
    },
    "wavelength": {
      "$ref":  "common.json#/definitions/safeStringPositiveFloat",
      "description": "Wave length in Angstrom"
    },
    "wavelengthSpread": {
      "$ref":  "common.json#/definitions/safeStringPositiveFloat",
      "pairedTo": "#configuration/wavelength",
      "description": "Wave length spread in Angstrom.  `wavelength` must be specified too"
    },
    "normalization": {
      "type": "string", "enum": ["Monitor", "Time"],
      "description": "Normalization type. Allowed values 'Total charge', 'Time', 'Monitor'",
      "examples": ["Monitor", "Time"]
    },
    "normalizationResortToTime": {
      "type": "boolean",
      "description": "Carry out Time normalization if Monitor was selected but no monitor counts are found"
    }
  }
}
